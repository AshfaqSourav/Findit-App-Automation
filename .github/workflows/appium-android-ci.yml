#name: Run Android Tests in GitHub Runner
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  setup-environment:
#    runs-on: ubuntu-latest
#    outputs:
#      appium_path: ${{ steps.set-appium-path.outputs.appium_path }}  # ‚úÖ Pass APPIUM_PATH between jobs
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'maven'
#
#      - name: Verify Java Version
#        run: java -version
#
#      - name: Setup NodeJS
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'
#
#      - name: Cache Maven Dependencies
#        id: cache-dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            maven-${{ runner.os }}-
#
#      - name: Install Appium & Dependencies
#        run: |
#          npm uninstall -g appium || true
#          npm cache clean --force
#          npm install -g appium@latest
#          appium driver install uiautomator2
#
#          # ‚úÖ Set and persist APPIUM_PATH correctly
#          export APPIUM_PATH=$(npm root -g)/appium/build/lib/main.js
#
#          echo "üîç Setting APPIUM_PATH..."
#          echo "APPIUM_PATH=$APPIUM_PATH" >> $GITHUB_ENV  # ‚úÖ Persist across workflow steps
#          echo "export APPIUM_PATH=$APPIUM_PATH" >> $HOME/.bashrc  # ‚úÖ Ensure persistence in shell
#
#          echo "‚úÖ Appium Main.js Path: $APPIUM_PATH"
#
#          # ‚úÖ Debug: Verify the path exists
#          ls -la $(npm root -g)/appium/build/lib/
#
#          # ‚úÖ Fix permissions for Appium main.js
#          if [ -f "$APPIUM_PATH" ]; then
#            sudo chmod +rx "$APPIUM_PATH"  # ‚úÖ Ensure it's readable & executable
#            echo "‚úÖ Fixed permissions for Appium main.js"
#          else
#            echo "‚ùå Appium main.js is missing! Check installation."
#            exit 1
#          fi
#
#          appium -v
#          which appium
#
#      - name: Debug APPIUM_PATH Before Use
#        run: |
#          echo "üîç Checking APPIUM_PATH in ENV file..."
#          cat $GITHUB_ENV | grep APPIUM_PATH || echo "‚ùå APPIUM_PATH not found in ENV!"
#          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
#          if [ -z "$APPIUM_PATH" ]; then
#            echo "‚ùå APPIUM_PATH is not set! Failing job."
#            exit 1
#          fi
#
#
#
#      - name: Debug Appium Path
#        run: |
#          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
#          if [ -z "$APPIUM_PATH" ]; then
#            echo "‚ùå APPIUM_PATH is not set! Failing job."
#            exit 1
#          fi
#          echo "‚úÖ APPIUM_PATH is correctly set: $APPIUM_PATH"
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Enable KVM (Better Placement)
#        run: |
#          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#          sudo udevadm control --reload-rules
#          sudo udevadm trigger --name-match=kvm
#
#      - name: Debug APPIUM_PATH Before Use  # ‚úÖ Ensure it's properly set
#        run: |
#          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
#          if [ -z "$APPIUM_PATH" ]; then
#            echo "‚ùå APPIUM_PATH is not set! Failing job."
#            exit 1
#          fi
#
#      - name: Ensure Target Directory Exists
#        run: |
#          mkdir -p /home/runner/work/Findit-App/
#          cp src/test/resources/apps/V1.2.2.apk /home/runner/work/Findit-App/V1.2.2.apk
#          uname -m
#
#      - name: Verify APK Existence
#        run: |
#          if [ -f src/test/resources/apps/V1.2.2.apk ]; then
#            echo "‚úÖ APK found!"
#            file src/test/resources/apps/V1.2.2.apk  # Check if it's a valid APK
#            ls -lh src/test/resources/apps/V1.2.2.apk
#            else
#            echo "‚ùå APK NOT FOUND!"
#            exit 1
#            fi
#
#      - name: Debug APK Path and Permissions
#        run: |
#          ls -lah /home/runner/work/Findit-App/V1.2.2.apk
#          file /home/runner/work/Findit-App/V1.2.2.apk
#
#
#      - name: Setup Android SDK
#        uses: android-actions/setup-android@v3
#
#      - name: Accept Android SDK Licenses
#        run: yes | sdkmanager --licenses
#
#      - name: Install Required Android Packages
#        run: |
#          sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;x86_64" "emulator"
#
#      - name: Create and Start Emulator
#        run: |
#          echo "üõ† Creating AVD for Pixel 6 API 30..."
#          export ANDROID_AVD_HOME=$HOME/.android/avd  # ‚úÖ Force correct AVD path
#
#          AVD_NAME="Pixel_6_API_30"
#
#
#          # Check if AVD already exists
#          if [ ! -d "$HOME/.android/avd/$AVD_NAME.avd" ]; then
#          echo "‚ö° AVD not found, creating new one..."
#          mkdir -p $ANDROID_AVD_HOME
#          echo "no" | avdmanager create avd -n $AVD_NAME -k "system-images;android-30;google_apis;x86_64" --device "pixel_6"
#          else
#          echo "‚úÖ AVD already exists, skipping creation."
#          fi
#
#          echo "üìã Available AVDs:"
#          avdmanager list avd
#
#          echo "üöÄ Starting Emulator..."
#          export ANDROID_EMULATOR_HOME=$HOME/.android
#          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_6_API_30 -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &
#          sleep 60  # Wait for emulator to boot
#
#          echo "üïí Waiting for emulator to boot..."
#          sleep 60  # Wait for boot
#
#          echo "üîÑ Verifying Emulator Status..."
#          adb wait-for-device
#          adb shell getprop sys.boot_completed | grep -m 1 '1'
#
#          echo "üìè Disabling Animations"
#          adb shell settings put global window_animation_scale 0
#          adb shell settings put global transition_animation_scale 0
#          adb shell settings put global animator_duration_scale 0
#
#          echo "üìè Default Screen Resolution:"
#          adb shell wm size
#
#          echo "üìè Forcing High Resolution"
#          adb shell wm size 1080x2400
#          adb shell wm density 537
#
#          echo "üìè Updated Screen Resolution:"
#          adb shell wm size
#          adb shell wm density
#
#          echo "üì± Device Info:"
#          adb shell getprop ro.product.model
#          adb shell getprop ro.product.brand
#          adb shell getprop ro.build.version.release
#
#
#      - name: Load Test Report History
#        uses: actions/checkout@v4
#        if: always()
#        continue-on-error: true
#        with:
#          ref: gh-pages
#          path: gh-pages  # ‚úÖ Checkout only gh-pages branch, not the entire repo
#
#      - name: Clear Previous Allure Results
#        run: |
#          echo "üßπ Cleaning previous Allure results..."
#          rm -rf allure-results allure-report allure-history || true
#          mkdir -p allure-results allure-report allure-history  # ‚úÖ Ensure fresh directories exist
#
#      - name: Install Allure CLI
#        run: |
#          echo "üì¶ Installing Allure CLI..."
#          sudo apt update
#          sudo apt install -y curl unzip
#          curl -o allure.tgz -OL https://github.com/allure-framework/allure2/releases/latest/download/allure-2.24.0.tgz
#          tar -zxvf allure.tgz -C /opt/
#          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/local/bin/allure
#
#      - name: Verify Allure Installation
#        run: |
#          echo "‚úÖ Checking Allure Version..."
#          allure --version
#
#      - name: Run Tests & Collect New Allure Results
#        run: |
#          echo "üõ† Running Tests..."
#          mvn clean test  # ‚úÖ Run tests and generate new allure-results
#
#      - name: Generate Fresh Allure Report
#        run: |
#          echo "üìä Generating Allure Report..."
#          allure generate allure-results --clean -o allure-report  # ‚úÖ Generate new report
#
#      - name: Store Allure Results (for CI Debugging)
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: allure-results
#          path: allure-results  # ‚úÖ Save test execution results
#          retention-days: 7  # ‚úÖ Keep for 7 days for debugging
#
#      - name: Store Allure Report (for CI Debugging)
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: allure-report
#          path: allure-report  # ‚úÖ Save generated test reports
#          retention-days: 7  # ‚úÖ Keep for 7 days
#
#      - name: Publish Test Report to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v3
#        if: always()
#        with:
#          github_token: ${{ secrets.TOKEN }}
#          publish_branch: gh-pages
#          publish_dir: allure-report  # ‚úÖ Upload only Allure reports, not entire repo
name: Run Android Tests in GitHub Runner

on:
  push:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      appium_path: ${{ steps.set-appium-path.outputs.appium_path }}  # ‚úÖ Pass APPIUM_PATH between jobs
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Appium & Dependencies
        run: |
          npm uninstall -g appium || true
          npm cache clean --force
          npm install -g appium@latest
          appium driver install uiautomator2
          echo "‚úÖ Installed Appium: $(appium -v)"
          which appium
      - name: Enable KVM (Better Placement)
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK Licenses
        run: yes | sdkmanager --licenses

      - name: Install Required Android Packages
        run: |
          sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;google_apis;x86_64" "emulator"

      - name: Install Allure CLI
        run: |
          echo "üì¶ Installing Allure CLI..."
          sudo apt update
          sudo apt install -y curl unzip
            
          # ‚úÖ Download a fixed version instead of latest
          echo "üì• Downloading Allure (Fixed Version)..."
          curl -L -o allure.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
            
          echo "üìÇ Extracting Allure..."
          tar -zxvf allure.tgz -C /opt/ || { echo "‚ùå Extraction failed!"; exit 1; }
            
          echo "üîó Creating Symlink for Allure..."
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/local/bin/allure
            
          echo "‚úÖ Installed Allure CLI Version: $(allure --version)"

      - name: Debug Allure Download
        run: |
          echo "üîç Checking Allure Tarball..."
          ls -lah allure.tgz
          file allure.tgz  # Should print "gzip compressed data"

      - name: Load Previous Test Report History (gh-pages)
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages  # ‚úÖ Checkout only gh-pages branch, not the entire repo

      - name: Clear Previous Allure Results
        run: |
          echo "üßπ Cleaning previous Allure results..."
          rm -rf allure-results allure-report allure-history || true
          mkdir -p allure-results allure-report allure-history  # ‚úÖ Ensure fresh directories exist

      - name: Create and Start Emulator
        run: |
          echo "üõ† Creating AVD for Pixel 6 API 30..."
          export ANDROID_AVD_HOME=$HOME/.android/avd  # ‚úÖ Force correct AVD path

          AVD_NAME="Pixel_6_API_30"


          # Check if AVD already exists
          if [ ! -d "$HOME/.android/avd/$AVD_NAME.avd" ]; then
          echo "‚ö° AVD not found, creating new one..."
          mkdir -p $ANDROID_AVD_HOME
          echo "no" | avdmanager create avd -n $AVD_NAME -k "system-images;android-30;google_apis;x86_64" --device "pixel_6"
          else
          echo "‚úÖ AVD already exists, skipping creation."
          fi

          echo "üìã Available AVDs:"
          avdmanager list avd

          echo "üöÄ Starting Emulator..."
          export ANDROID_EMULATOR_HOME=$HOME/.android
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_6_API_30 -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &
          sleep 60  # Wait for emulator to boot

          echo "üïí Waiting for emulator to boot..."
          sleep 60  # Wait for boot

          echo "üîÑ Verifying Emulator Status..."
          adb wait-for-device
          adb shell getprop sys.boot_completed | grep -m 1 '1'

          echo "üìè Disabling Animations"
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

          echo "üìè Default Screen Resolution:"
          adb shell wm size

          echo "üìè Forcing High Resolution"
          adb shell wm size 1080x2400
          adb shell wm density 537

          echo "üìè Updated Screen Resolution:"
          adb shell wm size
          adb shell wm density

          echo "üì± Device Info:"
          adb shell getprop ro.product.model
          adb shell getprop ro.product.brand
          adb shell getprop ro.build.version.release

      - name: Store Allure Results (for CI Debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: allure-results  # ‚úÖ Save test execution results
          retention-days: 7  # ‚úÖ Keep for 7 days for debugging

      - name: Store Allure Report (for CI Debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report  # ‚úÖ Save generated test reports
          retention-days: 7  # ‚úÖ Keep for 7 days

      - name: Publish Test Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report  # ‚úÖ Upload only Allure reports, not entire repo
