#
#name: Run Android Tests in GitHub Runner
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  setup-environment:
#    runs-on: ubuntu-latest
#    outputs:
#      cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'maven'
#
#      - name: Verify Java Version
#        run: java -version
#
#      - name: Setup NodeJS
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'
#
#      - name: Cache Maven Dependencies
#        id: cache-dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            maven-${{ runner.os }}-
#
#      - name: Install Appium & Dependencies
#        run: |
#          npm uninstall -g appium || true
#          npm cache clean --force
#          npm install -g appium@latest
#          appium driver install uiautomator2
#
#          # Find correct Appium path
#          APPIUM_PATH=$(npm root -g)/appium/build/lib/main.js
#          echo "Setting Appium Path..."
#
#          # ‚úÖ Persist across steps correctly
#          echo "APPIUM_PATH=$APPIUM_PATH" >> $GITHUB_ENV
#          echo "export APPIUM_PATH=$APPIUM_PATH" >> $HOME/.bashrc  # ‚úÖ Ensure persistence in shell
#          echo "Appium Main.js Path: $APPIUM_PATH"
#
#          # Verify if Appium main.js exists
#          if [ -f "$APPIUM_PATH" ]; then
#            echo "‚úÖ Appium main.js found!"
#          else
#            echo "‚ùå Appium main.js is missing! Check installation."
#          exit 1
#          fi
#
#          appium -v
#          which appium
##          echo "Appium Root Path: $(npm root -g)"
##          ls -la $(npm root -g)/appium/build/lib/ || echo "‚ùå Appium main.js is missing!"
#
##      - name: Start Appium Server
##        run: |
##          nohup appium --base-path /wd/hub --log appium_server.log &
##          sleep 15
##          if ! nc -z localhost 4723; then
##            echo "‚ùå Appium server failed to start!"
##            exit 1
##          fi
##          echo "‚úÖ Appium server is running!"
#
#  run-tests:
#    needs: setup-environment
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Enable KVM (Better Placement)
#        run: |
#          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#          sudo udevadm control --reload-rules
#          sudo udevadm trigger --name-match=kvm
#
#      - name: Start Android Emulator (API 30)
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 30
#          target: google_apis
#          arch: x86_64
#          script: |
#            adb wait-for-device
#            adb shell input keyevent 82
#            adb devices
#            echo "Waiting for emulator to boot..."
#            adb shell getprop sys.boot_completed | grep -m 1 '1'
#            echo "‚úÖ Emulator is ready!"
#            nohup adb logcat > /dev/null 2>&1 &  # Keep emulator active
#
#      - name: Keep Emulator Alive (Prevent Shutdown)
#        run: |
#          nohup adb shell input keyevent 82 &
#          sleep 10
#
#      - name: Ensure Target Directory Exists
#        run: mkdir -p /home/runner/work/Findit-App/
#
#      - name: Verify APK Existence
#        run: |
#          if [ -f src/test/resources/apps/V1.2.2.apk ]; then
#            echo "‚úÖ APK found!"
#            cp src/test/resources/apps/V1.2.2.apk /home/runner/work/Findit-App/V1.2.2.apk
#          else
#            echo "‚ùå APK NOT FOUND!"
#            exit 1
#          fi
#
#      - name: Debug Environment Variables
#        run: printenv | grep APPIUM_PATH
#
#      - name: Run Mobile Tests
#        run: mvn clean test
#        timeout-minutes: 30
#
#      - name: Archive Test Results
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: allure-results
#          path: allure-results
#
#  generate-report:
#    needs: run-tests
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout gh-pages for History
#        uses: actions/checkout@v4
#        with:
#          ref: gh-pages
#          path: gh-pages
#          persist-credentials: false
#
#      - name: Download Test Results
#        uses: actions/download-artifact@v4
#        with:
#          name: allure-results
#          path: allure-results
#
#      - name: Generate Allure Report
#        uses: simple-elf/allure-report-action@v1.7
#        with:
#          gh_pages: gh-pages
#          allure_history: allure-history
#          allure_results: allure-results
#
#      - name: Publish Test Report
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.TOKEN }}
#          publish_branch: gh-pages
#          publish_dir: allure-history
name: Run Android Tests in GitHub Runner

on:
  push:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      appium_path: ${{ steps.set-appium-path.outputs.appium_path }}  # ‚úÖ Pass APPIUM_PATH between jobs
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Verify Java Version
        run: java -version

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Maven Dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Install Appium & Dependencies
        run: |
          npm uninstall -g appium || true
          npm cache clean --force
          npm install -g appium@latest
          appium driver install uiautomator2

          # ‚úÖ Set and persist APPIUM_PATH correctly
          export APPIUM_PATH=$(npm root -g)/appium/build/lib/main.js

          echo "üîç Setting APPIUM_PATH..."
          echo "APPIUM_PATH=$APPIUM_PATH" >> $GITHUB_ENV  # ‚úÖ Persist across workflow steps
          echo "export APPIUM_PATH=$APPIUM_PATH" >> $HOME/.bashrc  # ‚úÖ Ensure persistence in shell

          echo "‚úÖ Appium Main.js Path: $APPIUM_PATH"

          # ‚úÖ Debug: Verify the path exists
          ls -la $(npm root -g)/appium/build/lib/

          # ‚úÖ Fix permissions for Appium main.js
          if [ -f "$APPIUM_PATH" ]; then
            sudo chmod +rx "$APPIUM_PATH"  # ‚úÖ Ensure it's readable & executable
            echo "‚úÖ Fixed permissions for Appium main.js"
          else
            echo "‚ùå Appium main.js is missing! Check installation."
            exit 1
          fi

          appium -v
          which appium

      - name: Debug APPIUM_PATH Before Use
        run: |
          echo "üîç Checking APPIUM_PATH in ENV file..."
          cat $GITHUB_ENV | grep APPIUM_PATH || echo "‚ùå APPIUM_PATH not found in ENV!"
          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
          if [ -z "$APPIUM_PATH" ]; then
            echo "‚ùå APPIUM_PATH is not set! Failing job."
            exit 1
          fi
      
      

      - name: Debug Appium Path
        run: |
          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
          if [ -z "$APPIUM_PATH" ]; then
            echo "‚ùå APPIUM_PATH is not set! Failing job."
            exit 1
          fi
          echo "‚úÖ APPIUM_PATH is correctly set: $APPIUM_PATH"
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable KVM (Better Placement)
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Debug APPIUM_PATH Before Use  # ‚úÖ Ensure it's properly set
        run: |
          echo "üîç Checking APPIUM_PATH: $APPIUM_PATH"
          if [ -z "$APPIUM_PATH" ]; then
            echo "‚ùå APPIUM_PATH is not set! Failing job."
            exit 1
          fi

      - name: Start Android Emulator (API 30)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          script: |
            adb wait-for-device
            adb shell input keyevent 82
            adb devices
            echo "Waiting for emulator to boot..."
            adb shell getprop sys.boot_completed | grep -m 1 '1'
            echo "‚úÖ Emulator is ready!"
            nohup adb logcat > /dev/null 2>&1 &  # Keep emulator active
            tail -f /dev/null

      - name: Ensure Target Directory Exists
        run: mkdir -p /home/runner/work/Findit-App/

      - name: Verify APK Existence
        run: |
          if [ -f src/test/resources/apps/V1.2.2.apk ]; then
            echo "‚úÖ APK found!"
            cp src/test/resources/apps/V1.2.2.apk /home/runner/work/Findit-App/V1.2.2.apk
          else
            echo "‚ùå APK NOT FOUND!"
            exit 1
          fi

      - name: Debug Environment Variables
        run: printenv | grep APPIUM_PATH  # ‚úÖ Ensure the variable is visible

      - name: Run Mobile Tests
        run: mvn clean test
        timeout-minutes: 30

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

#  run-tests:
#    needs: setup-environment
#    runs-on: ubuntu-latest
#    env:
#      APPIUM_PATH: ${{ needs.setup-environment.outputs.appium_path }}  # ‚úÖ Pass APPIUM_PATH correctly
#    steps:


#  generate-report:
#    needs: run-tests
#    if: always()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout gh-pages for History
#        uses: actions/checkout@v4
#        with:
#          ref: gh-pages
#          path: gh-pages
#          persist-credentials: false
#
#      - name: Download Test Results
#        uses: actions/download-artifact@v4
#        with:
#          name: allure-results
#          path: allure-results
#
#      - name: Generate Allure Report
#        uses: simple-elf/allure-report-action@v1.7
#        with:
#          gh_pages: gh-pages
#          allure_history: allure-history
#          allure_results: allure-results
#
#      - name: Publish Test Report
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.TOKEN }}
#          publish_branch: gh-pages
#          publish_dir: allure-history
